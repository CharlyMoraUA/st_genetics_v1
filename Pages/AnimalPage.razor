@page "/animal"
@inject st_genetics_v1.Services.AnimalService AnimalService

<h3>Animal Page</h3>

<!-- Filter Form -->
<form class="mb-4" @onsubmit="FilterAnimals">
    <div class="row g-3">
        <div class="col-md-4">
            <label for="name" class="form-label">Name:</label>
            <input type="text" id="name" class="form-control" @bind="filterName" />
        </div>
        <div class="col-md-4">
            <label for="breed" class="form-label">Breed:</label>
            <input type="text" id="breed" class="form-control" @bind="filterBreed" />
        </div>
        <div class="col-md-4">
            <label for="birthDate" class="form-label">Birth Date:</label>
            <input type="date" id="birthDate" class="form-control" @bind="filterBirthDate" />
        </div>
        <div class="col-md-4">
            <label for="sex" class="form-label">Sex:</label>
            <select id="sex" class="form-select" @bind="filterSex">
                <option value="">All</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="price" class="form-label">Price:</label>
            <input type="number" id="price" class="form-control" @bind="filterPrice" />
        </div>
        <div class="col-md-4">
            <label for="status" class="form-label">Status:</label>
            <select id="status" class="form-select" @bind="filterStatus">
                <option value="">All</option>
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
            </select>
        </div>
        <div class="col-md-12 mt-3">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>

<!-- Animal Grid -->
<div class="row mt-4">
    <!-- Add Animal Form -->
    <div class="col-md-4">
        <h4>Add Animal</h4>
        <form @onsubmit="AddAnimal">
            <div class="mb-3">
                <label for="addName" class="form-label">Name:</label>
                <input type="text" id="addName" class="form-control" @bind="newAnimal.Name" />
            </div>
            <!-- Add similar fields for other properties -->
            <button type="submit" class="btn btn-success">Add</button>
        </form>
    </div>

    <!-- Animal List -->
    <div class="col-md-8">
        @if (filteredAnimalList != null && filteredAnimalList.Any())
        {
            <h4>Animal List</h4>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Animal ID</th>
                        <th>Name</th>
                        <th>Breed</th>
                        <th>Birth Date</th>
                        <th>Sex</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var animal in filteredAnimalList)
                    {
                        <tr>
                            <td>@animal.AnimalId</td>
                            <td>@animal.Name</td>
                            <td>@animal.Breed</td>
                            <td>@animal.BirthDate.ToShortDateString()</td>
                            <td>@animal.Sex</td>
                            <td>@animal.Price</td>
                            <td>@animal.Status</td>
                            <td>
                                <button class="btn btn-warning" @onclick="() => EditAnimal(animal)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteAnimal(animal.AnimalId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="mt-3">No animals found.</p>
        }
    </div>
</div>

@code {
    private List<Models.Animal> animalList;
    private List<Models.Animal> filteredAnimalList;
    private Models.Animal newAnimal = new Models.Animal(); // Used for adding a new animal
    private Models.Animal editingAnimal; // Used for editing an existing animal

    // Filter criteria
    private string filterName = "";
    private string filterBreed = "";
    private DateTime? filterBirthDate;
    private string filterSex = "";
    private decimal? filterPrice;
    private string filterStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await AnimalService.LoadAnimalsAsync();
        animalList = AnimalService.GetAnimals();
        filteredAnimalList = new List<Models.Animal>(animalList);
    }

    private void FilterAnimals()
    {
        // Apply filters based on criteria
        filteredAnimalList = animalList
            .Where(a =>
                (string.IsNullOrEmpty(filterName) || a.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterBreed) || a.Breed.Contains(filterBreed, StringComparison.OrdinalIgnoreCase)) &&
                (!filterBirthDate.HasValue || a.BirthDate.Date == filterBirthDate.Value.Date) &&
                (string.IsNullOrEmpty(filterSex) || a.Sex == filterSex) &&
                (!filterPrice.HasValue || a.Price == filterPrice.Value) &&
                (string.IsNullOrEmpty(filterStatus) || a.Status == filterStatus))
            .ToList();
    }


    // Add Animal
    private async Task AddAnimal()
    {
        // Save to the backend using AnimalService
        await AnimalService.AddAnimalAsync(newAnimal);
        // Clear the form
        newAnimal = new Models.Animal();
        // Refresh the filtered list
        FilterAnimals();
    }

    // Edit Animal
    private void EditAnimal(Models.Animal animal)
    {
        editingAnimal = animal;
        // Set the form fields to the values of the editing animal
        newAnimal.Name = animal.Name;
        // Set other fields accordingly
    }

    // Update Animal
    private async Task UpdateAnimal()
    {
        // Perform validation if necessary
        // Update the original animal in the list
        int index = animalList.FindIndex(a => a.AnimalId == editingAnimal.AnimalId);
        if (index != -1)
        {
            animalList[index] = newAnimal;
            // Save to the backend using AnimalService
            await AnimalService.UpdateAnimalAsync(newAnimal);
            // Clear the form and editingAnimal
            newAnimal = new Models.Animal();
            editingAnimal = null;
            // Refresh the filtered list
            FilterAnimals();
        }
    }

    // Delete Animal
    private async Task DeleteAnimal(int animalId)
    {
        // Save to the backend using AnimalService
        await AnimalService.DeleteAnimalAsync(animalId);
        // Refresh the filtered list
        FilterAnimals();
    }
}
