@page "/animal"
@inject st_genetics_v1.Services.AnimalService AnimalService

<h3>Animal Page</h3>

<!-- Filter Form -->
<form class="mb-4" @onsubmit="FilterAnimals">
    <div class="row g-3">
        <div class="col-md-4">
            <label for="name" class="form-label">Name:</label>
            <input type="text" id="name" class="form-control" @bind="filterName" />
        </div>
        <div class="col-md-4">
            <label for="breed" class="form-label">Breed:</label>
            <input type="text" id="breed" class="form-control" @bind="filterBreed" />
        </div>
        <div class="col-md-4">
            <label for="birthDate" class="form-label">Birth Date:</label>
            <input type="date" id="birthDate" class="form-control" @bind="filterBirthDate" />
        </div>
        <div class="col-md-4">
            <label for="sex" class="form-label">Sex:</label>
            <select id="sex" class="form-select" @bind="filterSex">
                <option value="">All</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="price" class="form-label">Price:</label>
            <input type="number" id="price" class="form-control" @bind="filterPrice" />
        </div>
        <div class="col-md-4">
            <label for="status" class="form-label">Status:</label>
            <select id="status" class="form-select" @bind="filterStatus">
                <option value="">All</option>
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
            </select>
        </div>
        <div class="col-md-12 mt-3">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>

<!-- Animal Grid -->
<div class="row mt-4">

    <!-- Add Animal Form -->
    <div class="col-md-4">
        <h4>Add Animal</h4>
        <form @onsubmit="AddAnimal">
            <div class="mb-3">
                <label for="addName" class="form-label">Name:</label>
                <input type="text" id="addName" class="form-control" @bind="newAnimal.Name" />
            </div>
            <div class="mb-3">
                <label for="addBreed" class="form-label">Breed:</label>
                <input type="text" id="addBreed" class="form-control" @bind="newAnimal.Breed" />
            </div>
            <div class="mb-3">
                <label for="addBirthDate" class="form-label">Birth Date:</label>
                <input type="date" id="addBirthDate" class="form-control" @bind="newAnimal.BirthDate" />
            </div>
            <div class="mb-3">
                <label for="addSex" class="form-label">Sex:</label>
                <select id="addSex" class="form-select" @bind="newAnimal.Sex">
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="addPrice" class="form-label">Price:</label>
                <input type="number" id="addPrice" class="form-control" @bind="newAnimal.Price" />
            </div>
            <div class="mb-3">
                <label for="addStatus" class="form-label">Status:</label>
                <select id="addStatus" class="form-select" @bind="newAnimal.Status">
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                </select>
            </div>
            <button type="submit" class="btn btn-success">Add</button>
        </form>
    </div>


    <!-- Animal List -->
    <div class="col-md-8">
        @if (filteredAnimalList != null && filteredAnimalList.Any())
        {
            <h4>Animal List</h4>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Animal ID</th>
                        <th>Name</th>
                        <th>Breed</th>
                        <th>Birth Date</th>
                        <th>Sex</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var animal in GetVisibleAnimals())
                    {
                        <tr>
                            <td>
                                <input type="checkbox" @bind="selectedAnimals[animal.AnimalId]"
                                    @oninput="() => ToggleSelection(animal)" />
                            </td>
                            <td>@animal.AnimalId</td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <input type="text" @bind="newAnimal.Name" class="form-control" />
                                }
                                else
                                {
                                    @animal.Name
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <input type="text" @bind="newAnimal.Breed" class="form-control" />
                                }
                                else
                                {
                                    @animal.Breed
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <input type="date" @bind="newAnimal.BirthDate" class="form-control" />
                                }
                                else
                                {
                                    @animal.BirthDate.ToShortDateString()
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <select @bind="newAnimal.Sex" class="form-select">
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                }
                                else
                                {
                                    @animal.Sex
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <input type="number" @bind="newAnimal.Price" class="form-control" />
                                }
                                else
                                {
                                    @animal.Price
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <select @bind="newAnimal.Status" class="form-select">
                                        <option value="Active">Active</option>
                                        <option value="Inactive">Inactive</option>
                                    </select>
                                }
                                else
                                {
                                    @animal.Status
                                }
                            </td>
                            <td>
                                @if (editingAnimal != null && editingAnimal.AnimalId == animal.AnimalId)
                                {
                                    <button class="btn btn-success" @onclick="UpdateAnimal">Save</button>
                                }
                                else
                                {
                                    <button class="btn btn-warning" @onclick="() => EditAnimal(animal)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteAnimal(animal.AnimalId)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6"></td>
                        <td>
                            @filteredAnimalList.Sum(a => a.Price)
                        </td>
                        <td colspan="2"></td>
                    </tr>
                </tfoot>
            </table>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @for (int inx = 1; inx <= TotalPages(); inx++)
                    {
                        int currentPage = inx;
                        <button class="btn btn-outline-primary @(inx == CurrentPage ? "active" : "")"
                            @onclick="() => ChangePage(currentPage)">@inx</button>
                    }

                </ul>
            </nav>
        }
        else
        {
            <p class="mt-3">No animals found.</p>
        }
    </div>
</div>


<!-- Grouped Animals Table -->
<div class="col-md-12 mt-4">
    <h4>Grouped Animals</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Breed</th>
                <th>Selected Animals</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var groupedAnimal in GetGroupedAnimals())
            {
                <tr>
                    <td>@groupedAnimal.Breed</td>
                    <td>
                        @foreach (var selectedAnimal in groupedAnimal.SelectedAnimals)
                        {
                            <div>@selectedAnimal.Name</div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="mt-4">
    <h4>Purchase Information</h4>
    <p>Total Purchase Amount: @CalculatePurchaseInformation().TotalPurchaseAmount.ToString("C")</p>
    <p>Discount Amount: @CalculatePurchaseInformation().DiscountAmount.ToString("C")</p>
    <p>Shipping Amount: @CalculatePurchaseInformation().ShippingAmount.ToString("C")</p>
    <p>Total to Pay: @CalculatePurchaseInformation().TotalToPay.ToString("C")</p>
</div>

@code {
    private List<Models.Animal> animalList;
    private List<Models.Animal> filteredAnimalList;
    private Models.Animal newAnimal = new Models.Animal(); // Used for adding a new animal
    private Models.Animal editingAnimal; // Used for editing an existing animal

    // Filter criteria
    private string filterName = "";
    private string filterBreed = "";
    private DateTime? filterBirthDate;
    private string filterSex = "";
    private decimal? filterPrice;
    private string filterStatus = "";

    // Pagination
    private int PageSize = 10;
    private int CurrentPage = 1;

    // Dictionary to track the selected state of each animal
    private Dictionary<int, bool> selectedAnimals = new Dictionary<int, bool>();

    private IEnumerable<Models.Animal> GetVisibleAnimals()
    {
        return filteredAnimalList
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);
    }

    private int TotalPages()
    {
        int totalpages = (int)Math.Ceiling(filteredAnimalList.Count() / (double)PageSize);
        return totalpages;
    }

    private void ChangePage(int curpage)
    {
        CurrentPage = curpage;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await AnimalService.LoadAnimalsAsync();
        animalList = AnimalService.GetAnimals();
        filteredAnimalList = new List<Models.Animal>(animalList);

        // Initialize the selected state for each animal
        foreach (var animal in animalList)
        {
            selectedAnimals[animal.AnimalId] = false;
        }
    }

    private void FilterAnimals()
    {
        // Apply filters based on criteria
        filteredAnimalList = animalList
        .Where(a =>
        (string.IsNullOrEmpty(filterName) || a.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(filterBreed) || a.Breed.Contains(filterBreed, StringComparison.OrdinalIgnoreCase)) &&
        (!filterBirthDate.HasValue || a.BirthDate.Date == filterBirthDate.Value.Date) &&
        (string.IsNullOrEmpty(filterSex) || a.Sex == filterSex) &&
        (!filterPrice.HasValue || a.Price == filterPrice.Value) &&
        (string.IsNullOrEmpty(filterStatus) || a.Status == filterStatus))
        .ToList();
    }

    // Add Animal
    private async Task AddAnimal()
    {
        await AnimalService.AddAnimalAsync(newAnimal);
        selectedAnimals[newAnimal.AnimalId] = false;
        newAnimal = new Models.Animal();
        FilterAnimals();
    }

    // Edit Animal
    private void EditAnimal(Models.Animal animal)
    {
        editingAnimal = animal;
        newAnimal = new Models.Animal
            {
                AnimalId = animal.AnimalId,
                Name = animal.Name,
                Breed = animal.Breed,
                BirthDate = animal.BirthDate,
                Sex = animal.Sex,
                Price = animal.Price,
                Status = animal.Status
            };
    }

    // Update Animal
    private async Task UpdateAnimal()
    {
        int index = animalList.FindIndex(a => a.AnimalId == editingAnimal.AnimalId);
        if (index != -1)
        {
            animalList[index] = newAnimal;
            await AnimalService.UpdateAnimalAsync(newAnimal);
            newAnimal = new Models.Animal();
            editingAnimal = null;
            FilterAnimals();
        }
    }

    // Delete Animal
    private async Task DeleteAnimal(int animalId)
    {
        await AnimalService.DeleteAnimalAsync(animalId);
        FilterAnimals();
    }
    // Checkbox selection handling
    private void ToggleSelection(Models.Animal animal)
    {
        if (selectedAnimals.ContainsKey(animal.AnimalId))
        {
            selectedAnimals[animal.AnimalId] = !selectedAnimals[animal.AnimalId];

            // Update grouped animals table
            StateHasChanged();
        }
    }

    // Group animals by breed for the grouped animals table
    private IEnumerable<GroupedAnimal> GetGroupedAnimals()
    {
        if (animalList == null || selectedAnimals == null)
        {
            return Enumerable.Empty<GroupedAnimal>();
        }

        var selectedAnimalIds = selectedAnimals
        .Where(kv => kv.Value)
        .Select(kv => kv.Key)
        .ToList();

        var groupedAnimals = animalList
        .Where(a => selectedAnimalIds.Contains(a.AnimalId))
        .GroupBy(a => a.Breed)
        .Select(group => new GroupedAnimal
            {
                Breed = group.Key,
                SelectedAnimals = group.ToList()
            });

        return groupedAnimals;
    }



    // Class to represent grouped animals
    private class GroupedAnimal
    {
        public string Breed { get; set; }
        public List<Models.Animal> SelectedAnimals { get; set; }
    }

    private (decimal TotalPurchaseAmount, decimal DiscountAmount, decimal ShippingAmount, decimal TotalToPay)
    CalculatePurchaseInformation()
    {
        decimal totalPurchaseAmount = 0;
        decimal discountPercentage = 0;
        decimal shippingAmount = 0;

        // Calculate total purchase amount
        totalPurchaseAmount = GetGroupedAnimals().Sum(group => group.SelectedAnimals.Sum(animal => animal.Price));

        // Check if the customer adds an animal with a quantity greater than 5
        if (GetGroupedAnimals().Any(group => group.SelectedAnimals.Count > 5))
        {
            discountPercentage += 5;
        }

        // Check if the customer buys more than 10 animals
        if (GetGroupedAnimals().Sum(group => group.SelectedAnimals.Count) > 10)
        {
            discountPercentage += 3;
        }

        // Check if the customer buys more than 20 animals
        if (GetGroupedAnimals().Sum(group => group.SelectedAnimals.Count) > 20)
        {
            shippingAmount = 0; // Free shipping
        }
        else
        {
            shippingAmount = 1000; // $1,000.00 for shipping
        }

        // Calculate discount amount
        decimal discountAmount = totalPurchaseAmount * (discountPercentage / 100);

        // Calculate total to pay
        decimal totalToPay = totalPurchaseAmount - discountAmount + shippingAmount;

        return (totalPurchaseAmount, discountAmount, shippingAmount, totalToPay);
    }


}
